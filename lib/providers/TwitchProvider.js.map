{"version":3,"sources":["../../src/providers/TwitchProvider.js"],"names":["TwitchProvider","clientID","twitchOAuth","oauth","url","Error","headers","req","json","body","ok","data","status","error","message","id","sendGetRequest","emotes"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;IAEqBA,c;AACjB,0BAAaC,QAAb,EAAuBC,WAAvB,EAAoC;AAAA;AAChC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKE,KAAL,GAAaD,WAAb;AACH;;;;;0GAED,iBAAsBE,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACQ,KAAKH,QAAL,IAAiB,IADzB;AAAA;AAAA;AAAA;;AAAA,sBAEc,IAAII,KAAJ,CAAU,kCAAV,CAFd;;AAAA;AAAA,sBAGe,KAAKF,KAAL,IAAc,IAH7B;AAAA;AAAA;AAAA;;AAAA,sBAIc,IAAIE,KAAJ,CAAU,8BAAV,CAJd;;AAAA;AAAA;AAAA,uBAOoB,2BAAMD,GAAN,EAAW;AACvBE,kBAAAA,OAAO,EAAE;AACL,iCAAa,KAAKL,QADb;AAEL,qCAAiB,YAAY,KAAKE;AAF7B;AADc,iBAAX,CAPpB;;AAAA;AAOQI,gBAAAA,GAPR;AAAA;AAAA,uBAcqBA,GAAG,CAACC,IAAJ,EAdrB;;AAAA;AAcQC,gBAAAA,IAdR;;AAAA,qBAgBQF,GAAG,CAACG,EAhBZ;AAAA;AAAA;AAAA;;AAAA,iDAiBeD,IAAI,CAACE,IAjBpB;;AAAA;AAAA,sBAmBc,IAAIN,KAAJ,WAAaI,IAAI,CAACG,MAAlB,cAA4BH,IAAI,CAACI,KAAjC,gBAA4CJ,IAAI,CAACK,OAAjD,EAnBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yGAuBA,kBAAqBC,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,KAAKC,cAAL,CAAoB,4DAA4DD,EAAhF,CADvB;;AAAA;AACQE,gBAAAA,MADR;AAAA,kDAEW,uCAAsBA,MAAtB,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import { normalizeTwitchEmotes } from \"../utils/EmoteUtils\";\r\nimport fetch from \"node-fetch\";\r\n\r\nexport default class TwitchProvider {\r\n    constructor (clientID, twitchOAuth) {\r\n        this.clientID = clientID;\r\n        this.oauth = twitchOAuth;\r\n    }\r\n\r\n    async sendGetRequest (url) {\r\n        if (this.clientID == null) {\r\n            throw new Error(\"Twitch Client ID cannot be null.\");\r\n        } else if (this.oauth == null) {\r\n            throw new Error(\"Twitch OAuth cannot be null.\")\r\n        }\r\n        \r\n        let req = await fetch(url, {\r\n            headers: {\r\n                \"Client-ID\": this.clientID,\r\n                \"Authorization\": \"Bearer \" + this.oauth\r\n            }\r\n        });\r\n\r\n        let body = await req.json();\r\n\r\n        if (req.ok) {\r\n            return body.data;\r\n        } else {\r\n            throw new Error(`${body.status} ${body.error} - ${body.message}`);\r\n        }\r\n    }\r\n\r\n    async getEmotesByID (id) {\r\n        let emotes = await this.sendGetRequest(\"https://api.twitch.tv/helix/chat/emotes?broadcaster_id=\" + id);\r\n        return normalizeTwitchEmotes(emotes);\r\n    }\r\n}"],"file":"TwitchProvider.js"}